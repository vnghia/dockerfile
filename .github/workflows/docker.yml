name: ci

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "main"

jobs:
  collect_contexts:
    runs-on: ubuntu-latest
    outputs:
      context_root: ${{ steps.context_root.outputs.context_root }}
      contexts: ${{ steps.contexts.outputs.contexts }}
    steps:
      - uses: actions/checkout@v3
      - id: context_root
        run: echo "context_root=context" >> $GITHUB_OUTPUT
      - id: contexts
        run: echo "contexts=$(cd ${{ steps.context_root.outputs.context_root }} && ls -d * | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  docker:
    needs: collect_contexts
    strategy:
      matrix:
        context: ${{ fromJson(needs.collect_contexts.outputs.contexts) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set context path
        id: context
        run: echo "context_dir=${{ needs.collect_contexts.outputs.context_root }}/${{ matrix.context }}" >> $GITHUB_OUTPUT
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            context:
              - "${{ steps.context.outputs.context_dir }}/**"
              - ".github/workflows/docker.yml"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get image tag
        id: tag
        run: echo "image_tag=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.context }}:latest" >> $GITHUB_OUTPUT
      - name: Build
        id: build
        if: steps.filter.outputs.context == 'true'
        uses: docker/build-push-action@v3
        with:
          context: ${{ steps.context.outputs.context_dir }}
          outputs: |
            type=${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && 'registry' || 'docker' }}
          tags: ${{ steps.tag.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Test
        if: steps.build.outputs.imageid != ''
        run: |
          pip install -q -r test/test-requirements.txt
          mkdir -p ${{ steps.context.outputs.context_dir }}/test
          cd ${{ steps.context.outputs.context_dir }}/test && python ${GITHUB_WORKSPACE}/test/test-entry.py ${{ steps.build.outputs.imageid }} test.json
